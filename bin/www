#!/usr/bin/env node

/**
 * Module dependencies.
 */
let debug = require('debug')('demo:server');
let http = require('http');
let app = require('../app');
let io = require('socket.io')
let cv = require('../utils/canvas')
let {
  saveDotHandle,
  newChatHandle
} = require('../utils/socket')

let port = normalizePort(process.env.PORT || 3000);

// Create HTTP server
let server = http.createServer(app.callback())

// socket.io 实例
let ws = io.listen(server)

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 初始化 canvas
cv.init(() => {
  ws.on('connection', socket => {
    socket.join('chatroom')

    // 推送图片
    socket.emit('dataUrl', {
      url: cv.getDataUrl()
    })

    // 保存像素点
    // data<index, r, g, b, color, user>
    socket.on('saveDot', async data => {
      // 推送给其他用户
      socket.broadcast.to('chatroom').emit('newDot', data)
      saveDotHandle(data)
    })

    socket.on('newChat', async data => {
      // 推送给所有用户
      ws.sockets.emit('newChat', data)
      newChatHandle(data)
    })
  })
})

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}